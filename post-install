#!/bin/bash

# This script is used for users sync after multi linux install on a single machine

# Define here the default values 
# Local group for shared users 
LOCALGROUP=10000
# This is the admin group GID
ADMINGROUP=120
# This is all groups that are assigned by defaults for shared users
ALLGROUPS="wheel vboxuser"
# User to sync 
# For now just one is supported
USERTOSYNC=


function check_user() {
if [ ${USERTOSYNC:=NULL} == "NULL" ] ;
then 
	__print "USERTOSYNC not defined, exiting"
	exit
fi
}

function confirm() {
if [ $1 -ne 0 ]; 
then 
	shift
	__print "$*" 
	read __DUM
fi
}


function check_first ()  {
REZ=$(getent group admin)
if [ $? -ne 0 ] ;
then
	__print "admin group do not exit admin:$ADMINGROUP"
fi
REZ=$(__print $REZ | cut -d ':' -f 3)
if [ ${REZ:=0} -ne $ADMINGROUP ];
then
	__print "admin group not id $REZ admin:$ADMINGROUP" 
fi
}


__print() {
if [ ${SILENT:=0} -ne 1 ];
then
	echo $*
fi
}

amiroot() {
CMD=/usr/bin/whoami
if [ ! -x $CMD ];
then
	__print "cant get root status"
	exit 1 
else
	__DUM=$(/usr/bin/whoami)
	if [ ${__DUM:=NULL} == "root" ];
	then
		__print "You are root, continue"
	else
		__print "Need to be root to run this"
		exit 1
	fi
fi
}

#Global vars
export SILENT=0

#main

amiroot
check_user
check_first

df /data > /dev/null 2>&1 
if [ $? -ne 0 ];
then
	__print -n "Adding /data filesystem (^C to exit) ?"
	read dummy 
	__print "/dev/sda4               /data           ext4    defaults        0 2" >> /etc/fstab
	[[ ! -d /data ]] && mkdir /data
	mount /data
	if [ $? -ne 0];
	then
		__print "/data mount failed"
		exit
	fi
else
	__print "/data already mounted make sure mount is ok (any key to continue) "
	read dummy
fi

__print "Creating group local"
groupadd -g $LOCALGROUP local
confirm $? "Error creating local group $LOCALGROUP"

getent group admin > /dev/null
if [ $? -ne 0 ] ;
then
	__print "creating admin ($ADMINGROUP) group"
	groupadd -g $ADMINGROUP admin
fi

for i in $(ls -d /data/home/*) ;
do
	LOCALUID=$(ls -ladn $i | awk '{print $3}')
	LOCALGID=$(ls -ladn $i | awk '{print $4}')
	USERNAME=$(basename $i)
	if [ $LOCALGID -ne $LOCALGROUP ];
	then
		__print "Ignoring $USERNAME $LOCALUID $LOCALGID"
	else
		useradd -u $LOCALUID -g local -d /home/$USERNAME -s /bin/bash  $USERNAME 
		ln -s /data/home/$USERNAME /home/$USERNAME
		usermod -G admin pierre
	fi
	if [ $USERNAME == "pierre" ] ; 
	then
	for i in $(echo $ALLGROUPS) ;
	do
	getent group $i > /dev/nul 2>&1 
	if [ $? -eq 0 ]; 
	then
		__print "Add user pierre to $i group"
		usermod -G $i pierre
	fi
	done
	fi
done

if [ ! -r /var/log/messages ] ;
then
	__print "warnign messages file is not readable"
	__print "#destination messages { file("/var/log/messages" group("admin") perm(0640)); };"
fi

__print "Dont forget to update password"

# update root passwd 
if [ ! ~/root/.bashrc ];
then
	touch ~/root/.bashrc
fi
__print ". /data/local/env/bashrc.user" >> ~/.bashrc

cat << fin > /root/.bashrc
if [ -f /data/system/bashrc ] ;
then
        . /data/system/bashrc
fi
fin

