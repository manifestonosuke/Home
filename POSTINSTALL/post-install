#!/bin/bash

LOCALGROUP=10000

function confirm() {
if [ $1 -ne 0 ]; 
then 
	shift
	__print "$*" 
	read __DUM
fi
}


function check_first ()  {
REZ=$(getent group admin)
if [ $? -ne 0 ] ;
then
	__print "admin group do not exit admin:120"
exit
fi
REZ=$(__print $REZ | cut -d ':' -f 3)
if [ ${REZ:=0} -ne 120 ];
then
	__print "admin group not id 120 admin:120" 
exit
fi
amiroot
}


__print() {
if [ ${SILENT:=0} -ne 1 ];
then
	echo $?
fi
}

amiroot() {
CMD=/usr/bin/whoami
if [ ! -x $CMD ];
then
	__print "cant get root status"
	exit 1 
else
	__DUM=$(/usr/bin/whoami)
	if [ ${__DUM:=NULL} == "root" ];
	then
		__print "You are root, continue"
	else
		__print "Need to be root to run this"
		exit 1
	fi
fi
}

#Global vars
SILENT=0

#main

check_first
exit

df /data > /dev/null 2>&1 
if [ $? -ne 0 ];
then
	__print -n "Adding /data filesystem (^C to exit) ?"
	read dummy 
	__print "/dev/sda4               /data           ext4    defaults        0 2" >> /etc/fstab
	[[ ! -d /data ]] && mkdir /data
	mount /data
	if [ $? -ne 0];
	then
		__print "/data mount failed"
		exit
	fi
fi

__print "Creating group local"
groupadd -g $LOCALGROUP local
confirm $? "Error creating local group $LOCALGROUP"

getent group admin > /dev/null
if [ $? -ne 0 ] ;
then
	__print "creating admin (119) group"
	groupadd -g 119 admin
fi

for i in $(ls -d /data/home/*) ;
do
	LOCALUID=$(ls -ladn $i | awk '{print $3}')
	LOCALGID=$(ls -ladn $i | awk '{print $4}')
	USERNAME=$(basename $i)
	if [ $LOCALGID -ne $LOCALGROUP ];
	then
		__print "Ignoring $USERNAME $LOCALUID $LOCALGID"
	else
		useradd -u $LOCALUID -g local -d /home/$USERNAME -s /bin/bash  $USERNAME 
		ln -s /data/home/$USERNAME /home/$USERNAME
		usermod -G admin pierre
	fi
	if [ $USERNAME == "pierre" ] ; 
	then
	getent group wheel > /dev/nul 2>&1 
	if [ $? -eq 0 ]; 
	then
		usermod -G wheel pierre
	fi
	fi
done

if [ ! -r /var/log/messages ] ;
then
	__print "warnign messages file is not readable"
	__print "#destination messages { file("/var/log/messages" group("admin") perm(0640)); };"
fi

__print "Dont forget to update password"

# update root passwd 
if [ ! ~/root/.bashrc ];
then
	touch ~/root/.bashrc
fi
__print ". /data/local/env/bashrc.user" >> ~/.bashrc

